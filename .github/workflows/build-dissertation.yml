name: Build Dissertation PDFs (to repo root)

on:
  push:
    paths:
      - 'Dissertation-Proposal-main/**.tex'
      - 'Dissertation-Proposal-main/**.bib'
      - 'Dissertation-Proposal/**.tex'
      - 'Dissertation-Proposal/**.bib'
      - '*.tex'
      - '*.bib'
      - '**/*.tex'
      - '**/*.bib'
      - '**.sty'
      - '**.cls'
      - '.github/workflows/build-dissertation.yml'
  pull_request:
    paths:
      - 'Dissertation-Proposal-main/**.tex'
      - 'Dissertation-Proposal-main/**.bib'
      - 'Dissertation-Proposal/**.tex'
      - 'Dissertation-Proposal/**.bib'
      - '*.tex'
      - '*.bib'
      - '**/*.tex'
      - '**/*.bib'
      - '**.sty'
      - '**.cls'
      - '.github/workflows/build-dissertation.yml'
  workflow_dispatch:
    inputs:
      force_commit:
        description: 'Commit even if PDFs are unchanged'
        required: false
        type: choice
        default: 'false'
        options: ['false','true']

permissions:
  contents: write

concurrency:
  group: build-dissertation
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full history for safe pushes)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Locate dissertation directory
        id: locate
        run: |
          set -euo pipefail
          echo "Top-level tree:"; ls -la

          # Preferred names first
          for d in "Dissertation-Proposal-main" "Dissertation-Proposal"; do
            if [ -d "$d" ]; then
              echo "TEX_DIR=$d" >> "$GITHUB_ENV"
              echo "Found TEX_DIR=$d"
              exit 0
            fi
          done

          # Fallback: pick a dir (or root) containing a LaTeX root (\documentclass)
          mapfile -t CANDIDATES < <(grep -rl --include='*.tex' '^[[:space:]]*\\documentclass' . | xargs -r -n1 dirname | sort -u)
          if [ ${#CANDIDATES[@]} -eq 0 ]; then
            echo "No LaTeX directories with \\documentclass found." >&2
            exit 1
          fi
          # If the root (.) is among candidates, prefer it
          for c in "." "${CANDIDATES[@]}"; do
            if [ -d "$c" ]; then
              echo "TEX_DIR=$c" >> "$GITHUB_ENV"
              echo "Falling back to TEX_DIR=$c"
              exit 0
            fi
          done

      - name: Discover LaTeX roots
        id: discover
        run: |
          set -euo pipefail
          cd "$TEX_DIR"
          ROOTS="$(grep -rl --include='*.tex' '^[[:space:]]*\\documentclass' . | sed 's|^\./||')"
          if [ -z "$ROOTS" ]; then
            echo "No LaTeX root files found in $TEX_DIR." >&2
            exit 1
          fi
          printf 'ROOT_FILES<<EOF\n%s\nEOF\n' "$ROOTS" >> "$GITHUB_ENV"
          echo "Detected roots:"; echo "$ROOTS"

      - name: Compile LaTeX (latexmk)
        uses: xu-cheng/latex-action@v2
        with:
          root_file: ${{ env.ROOT_FILES }}
          working_directory: ${{ env.TEX_DIR }}
          args: -pdf -interaction=nonstopmode -file-line-error
          # Uncomment if needed:
          # latexmk_use_xelatex: true
          # latexmk_use_lualatex: true
          # latexmk_shell_escape: true

      - name: List produced PDFs
        run: |
          ls -lh "${TEX_DIR}" || true
          ls -lh "${TEX_DIR}"/*.pdf || echo "No PDFs found."

      - name: Upload PDFs (artifacts from source folder)
        uses: actions/upload-artifact@v4
        with:
          name: dissertation-pdfs
          path: |
            ${{ env.TEX_DIR }}/*.pdf
          if-no-files-found: warn
          retention-days: 14

      # Rebase first with autoStash, then copy (if needed) or just stage PDFs at root, commit, and push.
      - name: Commit and push PDFs to repo root
        if: startsWith(github.ref, 'refs/heads/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORCE_COMMIT: ${{ inputs.force_commit }}
        run: |
          set -euo pipefail

          echo "TEX_DIR=${TEX_DIR}"
          echo "ROOT_FILES:"
          printf '%s\n' "${ROOT_FILES:-<none>}"

          BRANCH="${GITHUB_REF#refs/heads/}"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git fetch origin "$BRANCH"
          git checkout "$BRANCH"
          git -c rebase.autoStash=true pull --rebase origin "$BRANCH"

          shopt -s nullglob
          PDFS=( "${TEX_DIR}"/*.pdf )
          if [ ${#PDFS[@]} -eq 0 ]; then
            echo "::error::No PDFs were produced in ${TEX_DIR}. Check the LaTeX build logs above."
            exit 1
          fi

          echo "Built PDFs:"
          ls -lh -- "${PDFS[@]}"

          COPIED_OR_STAGED=()

          if [ "${TEX_DIR}" = "." ]; then
            # Already at repo root: do NOT copy, just stage the files
            for f in "${PDFS[@]}"; do
              base="$(basename "$f")"
              COPIED_OR_STAGED+=("$base")
            done
          else
            # Copy to repo root (skip if source == destination)
            for f in "${PDFS[@]}"; do
              base="$(basename "$f")"
              if [ -e "./$base" ] && [ "$f" -ef "./$base" ]; then
                echo "Skipping copy for $f (already at repo root)"
              else
                cp -f "$f" "./$base"
              fi
              COPIED_OR_STAGED+=("$base")
            done
          fi

          echo "Files to stage at repo root:"
          printf ' - %s\n' "${COPIED_OR_STAGED[@]}"

          if [ ${#COPIED_OR_STAGED[@]} -gt 0 ]; then
            git add -- "${COPIED_OR_STAGED[@]}" || true
          fi

          echo "Git status after staging:"
          git status --porcelain || true

          # Commit only if there are changes, unless force_commit=true (workflow_dispatch only)
          if git diff --cached --quiet; then
            if [ "${FORCE_COMMIT:-false}" = "true" ]; then
              git commit --allow-empty -m "chore(dissertation): no content changes [skip ci]"
              git push --force-with-lease origin "$BRANCH"
              exit 0
            else
              echo "No root-level PDF changes to commit."
              exit 0
            fi
          fi

          git commit -m "chore(dissertation): update PDFs at repo root [skip ci]"
          git push --force-with-lease origin "$BRANCH"
